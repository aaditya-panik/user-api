// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "userapi/models"
)

// GetOneOKCode is the HTTP code returned for type GetOneOK
const GetOneOKCode int = 200

/*GetOneOK User with specific id

swagger:response getOneOK
*/
type GetOneOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewGetOneOK creates GetOneOK with default headers values
func NewGetOneOK() *GetOneOK {

	return &GetOneOK{}
}

// WithPayload adds the payload to the get one o k response
func (o *GetOneOK) WithPayload(payload *models.User) *GetOneOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one o k response
func (o *GetOneOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOneOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOneNotFoundCode is the HTTP code returned for type GetOneNotFound
const GetOneNotFoundCode int = 404

/*GetOneNotFound User Not Found

swagger:response getOneNotFound
*/
type GetOneNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOneNotFound creates GetOneNotFound with default headers values
func NewGetOneNotFound() *GetOneNotFound {

	return &GetOneNotFound{}
}

// WithPayload adds the payload to the get one not found response
func (o *GetOneNotFound) WithPayload(payload *models.Error) *GetOneNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one not found response
func (o *GetOneNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOneNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
