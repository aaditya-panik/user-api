// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "userapi/models"
)

// GetAllOKCode is the HTTP code returned for type GetAllOK
const GetAllOKCode int = 200

/*GetAllOK List the users

swagger:response getAllOK
*/
type GetAllOK struct {

	/*
	  In: Body
	*/
	Payload []*models.User `json:"body,omitempty"`
}

// NewGetAllOK creates GetAllOK with default headers values
func NewGetAllOK() *GetAllOK {

	return &GetAllOK{}
}

// WithPayload adds the payload to the get all o k response
func (o *GetAllOK) WithPayload(payload []*models.User) *GetAllOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all o k response
func (o *GetAllOK) SetPayload(payload []*models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.User, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetAllNotFoundCode is the HTTP code returned for type GetAllNotFound
const GetAllNotFoundCode int = 404

/*GetAllNotFound Users Not Found

swagger:response getAllNotFound
*/
type GetAllNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllNotFound creates GetAllNotFound with default headers values
func NewGetAllNotFound() *GetAllNotFound {

	return &GetAllNotFound{}
}

// WithPayload adds the payload to the get all not found response
func (o *GetAllNotFound) WithPayload(payload *models.Error) *GetAllNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all not found response
func (o *GetAllNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
